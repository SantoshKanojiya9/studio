
-- Create the mood_views table to track who has viewed which mood
create table public.mood_views (
    id bigint generated by default as identity primary key,
    mood_id bigint not null references public.moods(id) on delete cascade,
    viewer_id uuid not null references public.users(id) on delete cascade,
    viewed_at timestamp with time zone not null default now()
);

-- Add a unique constraint to prevent a user from viewing the same mood multiple times
alter table public.mood_views
add constraint mood_views_mood_id_viewer_id_key unique (mood_id, viewer_id);

-- Enable RLS for the new table
alter table public.mood_views enable row level security;

-- Policies for mood_views
-- Allow users to insert their own views.
create policy "Users can insert their own mood views"
on public.mood_views for insert
to authenticated
with check (viewer_id = auth.uid());

-- Allow users to see who has viewed their own moods.
create policy "Users can see views on their own moods"
on public.mood_views for select
to authenticated
using (
    exists (
        select 1
        from public.moods
        where moods.id = mood_views.mood_id and moods.user_id = auth.uid()
    )
);

-- Allow users to check if they have viewed a mood.
create policy "Users can see their own views"
on public.mood_views for select
to authenticated
using (viewer_id = auth.uid());
