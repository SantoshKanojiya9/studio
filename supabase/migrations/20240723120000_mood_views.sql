
-- Create the mood_views table only if it doesn't exist
create table if not exists public.mood_views (
    id bigint generated by default as identity primary key,
    mood_id bigint not null references public.moods(id) on delete cascade,
    viewer_id uuid not null references public.users(id) on delete cascade,
    viewed_at timestamp with time zone not null default now(),
    constraint unique_mood_viewer unique (mood_id, viewer_id)
);

-- Enable Row Level Security (RLS) on the table
alter table public.mood_views enable row level security;

-- Drop existing policies if they exist, to prevent errors on re-run
drop policy if exists "Users can insert their own mood views" on public.mood_views;
drop policy if exists "Users can view their own mood views" on public.mood_views;
drop policy if exists "Users can see who viewed their mood" on public.mood_views;

-- Create policies for who can access the mood_views data

-- Policy: Users can insert their own view records.
create policy "Users can insert their own mood views"
on public.mood_views for insert
with check (auth.uid() = viewer_id);

-- Policy: Users can see their own viewing history.
create policy "Users can view their own mood views"
on public.mood_views for select
using (auth.uid() = viewer_id);

-- Policy: A user can see who has viewed their own moods.
create policy "Users can see who viewed their mood"
on public.mood_views for select
using (
  exists (
    select 1
    from public.moods
    where moods.id = mood_views.mood_id and moods.user_id = auth.uid()
  )
);

-- Create or replace the helper function to get the list of viewers.
create or replace function get_mood_viewers(p_mood_id bigint)
returns table (
    id uuid,
    name text,
    picture text
) as $$
begin
    return query
    select
        u.id,
        u.name,
        u.picture
    from public.mood_views mv
    join public.users u on mv.viewer_id = u.id
    where mv.mood_id = p_mood_id
    order by mv.viewed_at desc;
end;
$$ language plpgsql stable;

    