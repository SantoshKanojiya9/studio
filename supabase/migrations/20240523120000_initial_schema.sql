
-- Enable the required extension for UUIDs
create extension if not exists "uuid-ossp" with schema "extensions";

--
-- Create the `users` table
--
create table public.users (
  id uuid not null primary key,
  name text,
  email text,
  picture text,
  deleted_at timestamp with time zone
);

-- Set up Row Level Security (RLS)
alter table public.users enable row level security;

-- Policies for `users` table
create policy "Allow individual select access" on public.users for select using (auth.uid() = id);
create policy "Allow individual update access" on public.users for update using (auth.uid() = id);
create policy "Allow public read access" on public.users for select using (true);
create policy "Allow individual insert access" on public.users for insert with check (auth.uid() = id);

--
-- Create the `emojis` table
--
create table public.emojis (
    id uuid not null default extensions.uuid_generate_v4() primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null references public.users(id) on delete cascade,
    model text,
    expression text,
    background_color text,
    emoji_color text,
    show_sunglasses boolean,
    show_mustache boolean,
    selected_filter text,
    animation_type text,
    shape text,
    eye_style text,
    mouth_style text,
    eyebrow_style text,
    feature_offset_x double precision,
    feature_offset_y double precision
);

-- Set up Row Level Security (RLS)
alter table public.emojis enable row level security;

-- Policies for `emojis` table
create policy "Allow public read access" on public.emojis for select using (true);
create policy "Allow individual insert access" on public.emojis for insert with check (auth.uid() = user_id);
create policy "Allow individual update access" on public.emojis for update using (auth.uid() = user_id);
create policy "Allow individual delete access" on public.emojis for delete using (auth.uid() = user_id);

--
-- Create the `subscriptions` table
--
create table public.subscriptions (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    subscriber_id uuid not null references public.users(id) on delete cascade,
    subscribee_id uuid not null references public.users(id) on delete cascade,
    constraint subscriptions_subscriber_id_subscribee_id_key unique (subscriber_id, subscribee_id)
);

-- Set up Row Level Security (RLS)
alter table public.subscriptions enable row level security;

-- Policies for `subscriptions` table
create policy "Allow public read access" on public.subscriptions for select using (true);
create policy "Allow individual insert access" on public.subscriptions for insert with check (auth.uid() = subscriber_id);
create policy "Allow individual delete access" on public.subscriptions for delete using (auth.uid() = subscriber_id);

--
-- Create the `notifications` table
--
create table public.notifications (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    recipient_id uuid not null references public.users(id) on delete cascade,
    sender_id uuid not null references public.users(id) on delete cascade,
    type text not null,
    emoji_id uuid references public.emojis(id) on delete cascade
);

-- Set up Row Level Security (RLS)
alter table public.notifications enable row level security;

-- Policies for `notifications` table
create policy "Allow read access for recipient" on public.notifications for select using (auth.uid() = recipient_id);

-- This function is called by a trigger whenever a new user signs up.
-- It creates a corresponding entry in the public.users table.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.users (id, name, email, picture)
  values (new.id, new.raw_user_meta_data->>'name', new.email, new.raw_user_meta_data->>'picture');
  return new;
end;
$$;

-- Trigger to execute the function after a new user is created.
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
